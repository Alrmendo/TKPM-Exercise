<header class="bg-blue-600 text-white py-4 shadow-md">
    <div class="w-[95%] mx-auto px-4">
        <h1 class="text-2xl font-bold">Quản Lý Danh Sách Sinh Viên</h1>
    </div>
</header>

<section class="bg-gray-100 p-4 rounded flex justify-center">
    <p class="text-sm text-gray-700 flex gap-2">
        Phiên bản: <span id="app-version">Đang tải...</span> |
        Ngày build: <span id="app-build-date">Đang tải...</span>
    </p>
</section>

<main class="w-[95%] mx-auto px-1 py-6">
    <!-- Import/Export -->
    <section class="bg-white p-6 rounded shadow-md mb-6">
        <h2 class="text-lg font-bold mb-4">Import/Export Dữ Liệu</h2>

        <div class="flex gap-4">
            <button id="export-btn" class="bg-[#f60] text-white px-4 py-2 rounded">Export</button>
        </div>

        <!-- Popup chọn loại export -->
        <div id="export-popup" class="fixed inset-0 bg-gray-800 bg-opacity-50 flex items-center justify-center hidden">
            <div class="bg-white p-6 rounded shadow-lg w-80">
                <h3 class="text-lg font-bold mb-4">Chọn định dạng xuất</h3>
                <select id="export-type" class="w-full border border-gray-300 rounded px-3 py-2 mb-4">
                    <option value="json">JSON</option>
                    <option value="excel">Excel</option>
                </select>
                <div class="flex justify-end space-x-2">
                    <button id="cancel-export"
                        class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">Hủy</button>
                    <button id="confirm-export"
                        class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">OK</button>
                </div>
            </div>
        </div>

        <!-- Form nhập file -->
        <form id="import-form" enctype="multipart/form-data" class="mt-4 flex items-center gap-4">
            <input type="file" id="import-file" accept=".csv, .json, .xlsx"
                class="border border-gray-300 rounded px-3 py-2">
            <button type="submit" class="bg-[#117A65] text-white px-4 py-2 rounded">Import</button>
        </form>
    </section>

    <!-- Form thêm sinh viên  -->
    <section class="bg-white p-6 rounded shadow-md mb-6">
        <h2 class="text-lg font-bold mb-4">Thêm Sinh Viên Mới</h2>
        <form id="add-student-form" class="grid grid-cols-1 text-[15px] md:grid-cols-2 gap-4">
            <div>
                <label for="student-id" class="block font-medium">Mã số sinh viên</label>
                <input type="text" id="student-id" class="w-full border border-gray-300 rounded px-3 py-2" required>
            </div>
            <div>
                <label for="student-name" class="block font-medium">Họ tên</label>
                <input type="text" id="student-name" class="w-full border border-gray-300 rounded px-3 py-2" required>
            </div>
            <div>
                <label for="student-birthdate" class="block font-medium">Ngày tháng năm sinh</label>
                <input type="date" id="student-birthdate" class="w-full border border-gray-300 rounded px-3 py-2">
            </div>
            <div>
                <label for="student-gender" class="block font-medium">Giới tính</label>
                <select id="student-gender" class="w-full border border-gray-300 rounded px-3 py-2">
                    <option value="">Chọn</option>
                    <option value="Nam">Nam</option>
                    <option value="Nữ">Nữ</option>
                </select>
            </div>
            <div class="flex flex-col w-full">
                <label for="student-department" class="font-medium mb-1">Khoa</label>
                <div class="flex items-center gap-2">
                    <select id="student-department" class="w-full border border-gray-300 rounded px-3 py-2"
                        required></select>
                    <img src="/images/add-svgrepo-com.svg" alt="Thêm" class="w-6 h-6 cursor-pointer hover:opacity-80"
                        onclick="addNewOption('Khoa')">
                    <img src="/images/delete-svgrepo-com.svg" alt="Xóa" class="w-6 h-6 cursor-pointer hover:opacity-80"
                        onclick="removeOption('Khoa')">
                    <img src="/images/edit-1-svgrepo-com.svg" alt="Sửa" class="w-6 h-6 cursor-pointer hover:opacity-80"
                        onclick="editOption('Khoa')">
                </div>
            </div>
            <div class="flex flex-col w-full">
                <label for="student-status" class="font-medium mb-1">Tình trạng sinh viên</label>
                <div class="flex items-center gap-2">
                    <select id="student-status" class="w-full border border-gray-300 rounded px-3 py-2"></select>
                    <img src="/images/add-svgrepo-com.svg" alt="Thêm" class="w-6 h-6 cursor-pointer hover:opacity-80"
                        onclick="addNewOption('Tình trạng sinh viên')">
                    <img src="/images/delete-svgrepo-com.svg" alt="Xóa" class="w-6 h-6 cursor-pointer hover:opacity-80"
                        onclick="removeOption('Tình trạng sinh viên')">
                    <img src="/images/edit-1-svgrepo-com.svg" alt="Sửa" class="w-6 h-6 cursor-pointer hover:opacity-80"
                        onclick="editOption('Tình trạng sinh viên')">
                </div>
            </div>
            <div>
                <label for="student-email" class="block font-medium">Email</label>
                <input type="email" id="student-email" class="w-full border border-gray-300 rounded px-3 py-2" required>
            </div>
            <div>
                <label for="student-phone" class="block font-medium">Số điện thoại</label>
                <input type="tel" id="student-phone" class="w-full border border-gray-300 rounded px-3 py-2">
            </div>
            <div>
                <label for="student-course" class="block font-medium">Khóa</label>
                <input type="text" id="student-course" class="w-full border border-gray-300 rounded px-3 py-2"
                    placeholder="VD: K22" required>
            </div>
            <div class="flex flex-col w-full">
                <label for="student-program" class="font-medium mb-1">Chương trình đào tạo</label>
                <div class="flex items-center gap-2">
                    <select id="student-program" class="w-full border border-gray-300 rounded px-3 py-2"
                        required></select>
                    <img src="/images/add-svgrepo-com.svg" alt="Thêm" class="w-6 h-6 cursor-pointer hover:opacity-80"
                        onclick="addNewOption('Chương trình đào tạo')">
                    <img src="/images/delete-svgrepo-com.svg" alt="Xóa" class="w-6 h-6 cursor-pointer hover:opacity-80"
                        onclick="removeOption('Chương trình đào tạo')">
                    <img src="/images/edit-1-svgrepo-com.svg" alt="Sửa" class="w-6 h-6 cursor-pointer hover:opacity-80"
                        onclick="editOption('Chương trình đào tạo')">
                </div>
            </div>
            <div class="md:col-span-2">
                <label for="student-address" class="block font-medium">Địa chỉ</label>
                <input type="text" id="student-address" class="w-full border border-gray-300 rounded px-3 py-2">
            </div>
            <div class="md:col-span-2 text-right">
                <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">Thêm</button>
            </div>
        </form>
    </section>

    <!-- Tìm kiếm sinh viên -->
    <section class="bg-white p-6 rounded shadow-md mb-6">
        <h2 class="text-lg font-bold mb-4">Tìm Kiếm Sinh Viên</h2>
        <select id="search-department" class="w-full border border-gray-300 rounded px-3 py-2 mb-4">
            <option value="">Chọn Khoa...</option>
            {{#each departments}}
            <option value="{{this}}">{{this}}</option>
            {{/each}}
        </select>

        <input type="text" id="search-input" class="w-full border border-gray-300 rounded px-3 py-2 mb-4"
            placeholder="Nhập MSSV hoặc Họ Tên...">
    </section>

    <!-- Danh sách sinh viên -->
    <section class="bg-white p-6 rounded shadow-md">
        <h2 class="text-lg font-bold mb-4">Danh Sách Sinh Viên</h2>
        <div id="student-list" class="overflow-x-auto">
            <table class="min-w-full border border-gray-300 text-left text-[15px]">
                <thead class="bg-gray-100">
                    <tr>
                        <th class="border px-3 py-2">MSSV</th>
                        <th class="border px-3 py-2">Họ Tên</th>
                        <th class="border px-3 py-2">Ngày Sinh</th>
                        <th class="border px-3 py-2">Giới Tính</th>
                        <th class="border px-3 py-2">Khoa</th>
                        <th class="border px-3 py-2">Tình Trạng</th>
                        <th class="border px-3 py-2">Email</th>
                        <th class="border px-3 py-2">SĐT</th>
                        <th class="border px-3 py-2">Khóa</th>
                        <th class="border px-3 py-2">Chương Trình</th>
                        <th class="border px-3 py-2">Địa Chỉ</th>
                        <th class="border px-7 py-2">Chỉnh sửa</th>
                    </tr>
                </thead>
                <tbody id="student-table-body">
                    {{#each students}}
                    <tr>
                        <td class="border px-3 py-2">{{this.studentId}}</td>
                        <td class="border px-3 py-2">{{this.name}}</td>
                        <td class="border px-3 py-2">{{this.birthdate}}</td>
                        <td class="border px-3 py-2">{{this.gender}}</td>
                        <td class="border px-3 py-2">{{this.department}}</td>
                        <td class="border px-3 py-2">{{this.status}}</td>
                        <td class="border px-3 py-2">{{this.email}}</td>
                        <td class="border px-3 py-2">{{this.phone}}</td>
                        <td class="border px-3 py-2">{{this.course}}</td>
                        <td class="border px-3 py-2">{{this.program}}</td>
                        <td class="border px-3 py-2">{{this.address}}</td>
                        <td class="border px-3 py-2">
                            <button onclick='editStudent({{json this}})'
                                class="bg-green-500 text-white px-2 py-1 rounded">Sửa</button>
                            <button onclick="deleteStudent('{{this._id}}')"
                                class="bg-red-500 text-white px-2 py-1 rounded">Xóa</button>
                        </td>
                    </tr>
                    {{/each}}
                </tbody>
            </table>
        </div>
    </section>
</main>

<!-- Modal chỉnh sửa sinh viên -->
<div id="edit-modal" class="flex hidden fixed inset-0 bg-gray-800 bg-opacity-50 items-center justify-center">
    <div class="bg-white rounded shadow-lg p-6 w-full max-w-4xl relative">
        <h3 class="text-xl font-bold mb-4">Chỉnh sửa thông tin sinh viên</h3>
        <form id="edit-student-form" class="grid grid-cols-2 gap-4">
            <!-- Ẩn ID MongoDB -->
            <input type="hidden" id="edit-student-db-id">

            <!-- Mã số sinh viên -->
            <div>
                <label for="edit-student-id" class="block font-medium">Mã số sinh viên</label>
                <input type="text" id="edit-student-id" class="w-full border border-gray-300 rounded px-3 py-2"
                    required>
            </div>

            <!-- Họ tên -->
            <div>
                <label for="edit-student-name" class="block font-medium">Họ tên</label>
                <input type="text" id="edit-student-name" class="w-full border border-gray-300 rounded px-3 py-2"
                    required>
            </div>

            <!-- Ngày tháng năm sinh -->
            <div>
                <label for="edit-student-birthdate" class="block font-medium">Ngày tháng năm sinh</label>
                <input type="date" id="edit-student-birthdate" class="w-full border border-gray-300 rounded px-3 py-2">
            </div>

            <!-- Giới tính -->
            <div>
                <label for="edit-student-gender" class="block font-medium">Giới tính</label>
                <select id="edit-student-gender" class="w-full border border-gray-300 rounded px-3 py-2" required>
                    <option value="">Chọn</option>
                    <option value="Nam">Nam</option>
                    <option value="Nữ">Nữ</option>
                </select>
            </div>

            <!-- Khoa -->
            <div>
                <label for="edit-student-department" class="block font-medium">Khoa</label>
                <select id="edit-student-department" class="w-full border border-gray-300 rounded px-3 py-2" required>
                    <!-- Các options sẽ được cập nhật từ danh sách cấu hình -->
                </select>
            </div>

            <!-- Tình trạng -->
            <div>
                <label for="edit-student-status" class="block font-medium">Tình trạng sinh viên</label>
                <select id="edit-student-status" class="w-full border border-gray-300 rounded px-3 py-2">
                    <!-- Các options sẽ được cập nhật từ danh sách cấu hình -->
                </select>
            </div>

            <!-- Email -->
            <div>
                <label for="edit-student-email" class="block font-medium">Email</label>
                <input type="email" id="edit-student-email" class="w-full border border-gray-300 rounded px-3 py-2"
                    required>
            </div>

            <!-- Số điện thoại -->
            <div>
                <label for="edit-student-phone" class="block font-medium">Số điện thoại</label>
                <input type="tel" id="edit-student-phone" class="w-full border border-gray-300 rounded px-3 py-2"
                    required>
            </div>

            <!-- Khóa -->
            <div>
                <label for="edit-student-course" class="block font-medium">Khóa</label>
                <input type="text" id="edit-student-course" class="w-full border border-gray-300 rounded px-3 py-2"
                    placeholder="VD: K22">
            </div>

            <!-- Chương trình -->
            <div>
                <label for="edit-student-program" class="block font-medium">Chương trình</label>
                <select id="edit-student-program" class="w-full border border-gray-300 rounded px-3 py-2" required>
                    <!-- Các options sẽ được cập nhật từ danh sách cấu hình -->
                </select>
            </div>

            <!-- Địa chỉ -->
            <div class="col-span-2">
                <label for="edit-student-address" class="block font-medium">Địa chỉ</label>
                <input type="text" id="edit-student-address" class="w-full border border-gray-300 rounded px-3 py-2">
            </div>

            <div class="col-span-2 flex justify-end space-x-2">
                <button type="button" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
                    id="cancel-edit">Hủy</button>
                <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
                    Cập nhật
                </button>
            </div>
        </form>
    </div>
</div>


<script>
    const tableBody = document.getElementById('student-table-body');
    const searchInput = document.getElementById('search-input');

    // Load danh sách sinh viên từ MongoDB
    async function loadStudentsFromAPI() {
        try {
            const response = await fetch('/students');
            const students = await response.json();
            tableBody.innerHTML = ''; // Xóa danh sách cũ trước khi render lại
            students.forEach(addStudentRow);
        } catch (error) {
            console.error("Lỗi tải danh sách sinh viên:", error);
        }
    }

    // Thêm sinh viên mới
    document.getElementById('add-student-form').addEventListener('submit', async (e) => {
        e.preventDefault();

        const newStudent = {
            studentId: document.getElementById('student-id').value.trim(),
            name: document.getElementById('student-name').value.trim(),
            birthdate: document.getElementById('student-birthdate').value.trim(),
            gender: document.getElementById('student-gender').value,
            department: document.getElementById('student-department').value,
            status: document.getElementById('student-status').value,
            email: document.getElementById('student-email').value.trim(),
            phone: document.getElementById('student-phone').value.trim(),
            course: document.getElementById('student-course').value.trim(),
            program: document.getElementById('student-program').value.trim(),
            address: document.getElementById('student-address').value.trim(),
        };

        // Kiểm tra trùng MSSV
        const response = await fetch('/students');
        const students = await response.json();
        if (students.some(student => student.studentId === newStudent.studentId)) {
            alert('Mã số sinh viên đã tồn tại!');
            return;
        }

        // Kiểm tra định dạng Email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(newStudent.email)) {
            alert('Email không hợp lệ!');
            return;
        }

        // Kiểm tra số điện thoại chỉ chứa số và có từ 9-11 chữ số
        const phoneRegex = /^\d{9,11}$/;
        if (!phoneRegex.test(newStudent.phone)) {
            alert('Số điện thoại không hợp lệ! Vui lòng nhập 9-11 chữ số.');
            return;
        }

        try {
            const response = await fetch('/students', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(newStudent)
            });

            if (response.ok) {
                alert('Thêm sinh viên thành công!');
                location.reload();
            } else {
                alert('Lỗi: ' + (await response.json()).error);
            }
        } catch (error) {
            console.error("Lỗi khi thêm sinh viên:", error);
        }
    });

    // Xóa sinh viên
    async function deleteStudent(studentId) {
        if (!confirm("Bạn có chắc chắn muốn xóa sinh viên này?")) return;

        try {
            const response = await fetch(`/students/${studentId}`, { method: 'DELETE' });

            if (response.ok) {
                alert('Xóa sinh viên thành công!');
                location.reload();
            } else {
                alert('Lỗi khi xóa sinh viên!');
            }
        } catch (error) {
            console.error("Lỗi khi xóa sinh viên:", error);
        }
    }

    // Mở modal chỉnh sửa sinh viên
    function editStudent(student) {
        document.getElementById('edit-student-db-id').value = student._id;
        document.getElementById('edit-student-id').value = student.studentId;
        document.getElementById('edit-student-name').value = student.name;
        document.getElementById('edit-student-birthdate').value = student.birthdate || "";
        document.getElementById('edit-student-gender').value = student.gender;
        document.getElementById('edit-student-department').value = student.department;
        document.getElementById('edit-student-status').value = student.status;
        document.getElementById('edit-student-email').value = student.email;
        document.getElementById('edit-student-phone').value = student.phone || "";
        document.getElementById('edit-student-course').value = student.course || "";
        document.getElementById('edit-student-address').value = student.address || "";
        document.getElementById('edit-student-program').value = student.program || "";

        // Mở modal
        document.getElementById('edit-modal').classList.remove('hidden');
    }

    // Đóng modal khi bấm nút "Hủy"
    document.getElementById('cancel-edit').addEventListener('click', function () {
        document.getElementById('edit-modal').classList.add('hidden');
    });

    // Cập nhật sinh viên
    document.getElementById('edit-student-form').addEventListener('submit', async function (event) {
        event.preventDefault();

        const studentId = document.getElementById('edit-student-db-id').value; // Lấy _id của MongoDB
        const updatedStudent = {
            studentId: document.getElementById('edit-student-id').value.trim(),
            name: document.getElementById('edit-student-name').value.trim(),
            birthdate: document.getElementById('edit-student-birthdate').value.trim(),
            gender: document.getElementById('edit-student-gender').value,
            department: document.getElementById('edit-student-department').value,
            status: document.getElementById('edit-student-status').value,
            email: document.getElementById('edit-student-email').value.trim(),
            phone: document.getElementById('edit-student-phone').value.trim(),
            course: document.getElementById('edit-student-course').value.trim(),
            program: document.getElementById('edit-student-program').value.trim(),
            address: document.getElementById('edit-student-address').value.trim(),
        };

        // Kiểm tra trùng MSSV (ngoại trừ MSSV cũ)
        const response = await fetch('/students');
        const students = await response.json();
        if (students.some(student => student.studentId === updatedStudent.studentId && student._id !== studentId)) {
            alert('Mã số sinh viên đã tồn tại!');
            return;
        }

        // Kiểm tra định dạng Email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(updatedStudent.email)) {
            alert('Email không hợp lệ!');
            return;
        }

        // Kiểm tra số điện thoại chỉ chứa số và có từ 9-11 chữ số
        const phoneRegex = /^\d{9,11}$/;
        if (!phoneRegex.test(updatedStudent.phone)) {
            alert('Số điện thoại không hợp lệ! Vui lòng nhập 9-11 chữ số.');
            return;
        }

        try {
            const response = await fetch(`/students/${studentId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(updatedStudent),
            });

            const result = await response.json();

            if (response.ok) {
                alert('Cập nhật thành công!');
                location.reload();
            } else {
                alert('Lỗi khi cập nhật: ' + result.error);
            }
        } catch (error) {
            console.error("Lỗi khi cập nhật sinh viên:", error);
            alert('Có lỗi xảy ra khi cập nhật!');
        }
    });


    // Tìm kiếm sinh viên theo MSSV hoặc tên
    searchInput.addEventListener('input', function () {
        const filter = searchInput.value.toLowerCase();
        Array.from(tableBody.children).forEach(row => {
            const studentId = row.children[0].textContent.toLowerCase();
            const studentName = row.children[1].textContent.toLowerCase();
            row.style.display = studentId.includes(filter) || studentName.includes(filter) ? '' : 'none';
        });
    });

    // Tìm kiếm sinh viên theo Khoa
    document.addEventListener('DOMContentLoaded', function () {
        const searchInput = document.getElementById('search-input');
        const searchDepartment = document.getElementById('search-department');
        const tableBody = document.getElementById('student-table-body');

        function filterStudents() {
            const searchText = searchInput.value.toLowerCase().trim();
            const departmentText = searchDepartment.value.toLowerCase().trim();

            Array.from(tableBody.children).forEach(row => {
                const studentId = row.children[0].textContent.toLowerCase();
                const studentName = row.children[1].textContent.toLowerCase();
                const studentDepartment = row.children[4].textContent.toLowerCase();

                const matchIdOrName = searchText === "" || studentId.includes(searchText) || studentName.includes(searchText);
                const matchDepartment = departmentText === "" || studentDepartment === departmentText;

                row.style.display = matchIdOrName && matchDepartment ? '' : 'none';
            });
        }

        searchInput.addEventListener('input', filterStudents);
        searchDepartment.addEventListener('change', filterStudents);
    });

    async function loadDepartments() {
        try {
            const response = await fetch('/config'); // Gọi API lấy danh sách khoa
            const config = await response.json();

            if (!config.departments || config.departments.length === 0) {
                console.error('Danh sách khoa rỗng!');
                return;
            }

            const departmentSelect = document.getElementById('search-department');
            departmentSelect.innerHTML = '<option value="">Chọn Khoa...</option>'; // Xóa dữ liệu cũ

            config.departments.forEach(dept => {
                const option = document.createElement('option');
                option.value = dept;
                option.textContent = dept;
                departmentSelect.appendChild(option);
            });
        } catch (error) {
            console.error('Lỗi tải danh sách khoa:', error);
        }
    }

    // Gọi hàm này khi trang tải
    document.addEventListener('DOMContentLoaded', loadDepartments);


    // Thêm sinh viên vào bảng
    function addStudentRow(student) {
        const newRow = document.createElement('tr');

        newRow.innerHTML = `
        <td class="text-[13px] border px-3 py-2">${student.studentId || ''}</td>
        <td class="text-[13px] border px-3 py-2">${student.name || ''}</td>
        <td class="text-[13px] border px-3 py-2">${student.birthdate || ''}</td>
        <td class="text-[13px] border px-3 py-2">${student.gender || ''}</td>
        <td class="text-[13px] border px-3 py-2">${student.department || ''}</td>
        <td class="text-[13px] border px-3 py-2">${student.status || ''}</td>
        <td class="text-[13px] border px-3 py-2">${student.email || ''}</td>
        <td class="text-[13px] border px-3 py-2">${student.phone || ''}</td>
        <td class="text-[13px] border px-3 py-2">${student.course || ''}</td>
        <td class="text-[13px] border px-3 py-2">${student.program || ''}</td>
        <td class="text-[13px] border px-3 py-2">${student.address || ''}</td>
        <td class="text-[13px] border px-3 py-2">
            <button class="bg-green-500 text-white px-2 py-1 rounded hover:bg-green-600" 
                onclick='editStudent(${JSON.stringify(student)})'>Sửa</button>
            <button class="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600" 
                onclick="deleteStudent('${student._id}')">Xóa</button>
        </td>
    `;

        tableBody.appendChild(newRow);
    }
    // Load danh sách khi trang được mở
    document.addEventListener('DOMContentLoaded', loadStudentsFromAPI);

    // Lấy danh sách department, status, program từ server
    async function loadConfigOptions() {
        try {
            const response = await fetch('/config');
            const config = await response.json();

            // Lọc và cập nhật các select
            populateSelectOptions("student-department", config.departments);
            populateSelectOptions("student-status", config.statuses);
            populateSelectOptions("student-program", config.programs);

            // Cập nhật các trường trong modal chỉnh sửa
            populateSelectOptions("edit-student-department", config.departments);
            populateSelectOptions("edit-student-status", config.statuses);
            populateSelectOptions("edit-student-program", config.programs);

        } catch (error) {
            console.error("Lỗi khi tải danh sách cấu hình:", error);
        }
    }

    // Hàm để đổ dữ liệu vào select
    function populateSelectOptions(selectId, options) {
        const selectElement = document.getElementById(selectId);
        selectElement.innerHTML = ""; // Xóa các tùy chọn cũ

        options.forEach(option => {
            const newOption = document.createElement("option");
            newOption.value = option;
            newOption.textContent = option;

            // Kiểm tra xem giá trị hiện tại của select có trùng với option không
            if (selectElement.value === option) {
                newOption.selected = true;
            }

            selectElement.appendChild(newOption);
        });

        // Sau khi thêm, chọn mục mới
        if (options.length > 0) {
            selectElement.value = options[options.length - 1]; // Chọn mục cuối cùng vừa thêm
        }
    }

    // Hàm thêm mới Department, Status, Program
    async function addNewOption(type) {
        const newValue = prompt(`Nhập ${type} mới:`).trim();
        if (!newValue) return;

        try {
            const response = await fetch('/config');
            let config = await response.json();

            // Thêm giá trị mới vào danh sách
            if (type === "Khoa" && !config.departments.includes(newValue)) {
                config.departments.push(newValue);
            }
            if (type === "Tình trạng sinh viên" && !config.statuses.includes(newValue)) {
                config.statuses.push(newValue);
            }
            if (type === "Chương trình đào tạo" && !config.programs.includes(newValue)) {
                config.programs.push(newValue);
            }

            // Lưu lại vào cấu hình
            await fetch('/config', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(config),
            });

            // Thông báo thành công và tải lại danh sách cấu hình
            alert(`${type} đã được thêm!`);
            loadConfigOptions(); // Tải lại danh sách sau khi cập nhật

            // Sau khi load lại danh sách, chọn giá trị mới tự động
            const selectElement = document.getElementById(`student-${type.toLowerCase().replace(" ", "-")}`);
            selectElement.value = newValue; // Chọn giá trị mới vào select

        } catch (error) {
            console.error(`Lỗi khi thêm ${type}:`, error);
        }
    }

    // Gọi hàm load config khi trang tải
    document.addEventListener('DOMContentLoaded', () => {
        loadConfigOptions();
        loadStudentsFromAPI();
    });

    // Hàm đổi tên một giá trị trong danh sách
    async function editOption(type) {
        const selectElement = type === "Khoa" ? "student-department"
            : type === "Tình trạng sinh viên" ? "student-status"
                : "student-program";

        const oldValue = document.getElementById(selectElement).value;

        if (!oldValue) {
            alert(`Vui lòng chọn một ${type} để chỉnh sửa.`);
            return;
        }

        const newValue = prompt(`Nhập tên mới cho ${type}:`, oldValue).trim();
        if (!newValue || newValue === oldValue) return;

        try {
            const response = await fetch('/config');
            let config = await response.json();

            if (type === "Khoa") {
                const index = config.departments.indexOf(oldValue);
                if (index !== -1) config.departments[index] = newValue;
            } else if (type === "Tình trạng sinh viên") {
                const index = config.statuses.indexOf(oldValue);
                if (index !== -1) config.statuses[index] = newValue;
            } else if (type === "Chương trình đào tạo") {
                const index = config.programs.indexOf(oldValue);
                if (index !== -1) config.programs[index] = newValue;
            }

            await fetch('/config', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(config),
            });

            alert(`${type} đã được cập nhật!`);
            loadConfigOptions(); // Tải lại danh sách sau khi cập nhật
        } catch (error) {
            console.error(`Lỗi khi cập nhật ${type}:`, error);
        }
    }

    async function removeOption(type) {
        // Lấy ID của dropdown dựa trên loại (Khoa, Tình trạng sinh viên, Chương trình đào tạo)
        const selectElement = type === "Khoa" ? "student-department"
            : type === "Tình trạng sinh viên" ? "student-status"
                : "student-program";

        // Lấy giá trị đã chọn từ dropdown
        const selectedValue = document.getElementById(selectElement).value;

        // Kiểm tra nếu không có giá trị nào được chọn
        if (!selectedValue) {
            alert(`Vui lòng chọn một ${type} để xóa.`);
            return;
        }

        // Xác nhận việc xóa
        if (!confirm(`Bạn có chắc chắn muốn xóa ${type}: "${selectedValue}"?`)) {
            return; // Dừng nếu người dùng không xác nhận
        }

        try {
            // Lấy cấu hình hiện tại từ server
            const response = await fetch('/config');
            let config = await response.json();

            // Xóa giá trị đã chọn khỏi mảng tương ứng (Khoa, Tình trạng sinh viên, Chương trình đào tạo)
            if (type === "Khoa") {
                config.departments = config.departments.filter(item => item !== selectedValue);
            } else if (type === "Tình trạng sinh viên") {
                config.statuses = config.statuses.filter(item => item !== selectedValue);
            } else if (type === "Chương trình đào tạo") {
                config.programs = config.programs.filter(item => item !== selectedValue);
            }

            // Lưu lại cấu hình đã thay đổi
            await fetch('/config', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(config),
            });

            alert(`${type} "${selectedValue}" đã được xóa!`);
            loadConfigOptions(); // Tải lại danh sách sau khi xóa
        } catch (error) {
            console.error(`Lỗi khi xóa ${type}:`, error);
        }
    }

    document.getElementById('export-btn').addEventListener('click', () => {
        document.getElementById('export-popup').classList.remove('hidden');
    });

    document.getElementById('cancel-export').addEventListener('click', () => {
        document.getElementById('export-popup').classList.add('hidden');
    });

    document.getElementById('confirm-export').addEventListener('click', () => {
        const format = document.getElementById('export-type').value;
        window.location.href = `/export/${format}`;
        document.getElementById('export-popup').classList.add('hidden');
    });

    document.getElementById('import-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        const fileInput = document.getElementById('import-file');
        if (!fileInput.files.length) {
            alert("Vui lòng chọn file!");
            return;
        }

        const file = fileInput.files[0];
        const formData = new FormData();
        formData.append('file', file);

        let endpoint;
        if (file.name.endsWith('.json')) {
            endpoint = '/import/json';
        } else if (file.name.endsWith('.xlsx')) {
            endpoint = '/import/excel';
        } else {
            alert('Định dạng file không hợp lệ!');
            return;
        }

        const response = await fetch(endpoint, {
            method: 'POST',
            body: formData
        });

        const result = await response.json();
        alert(result.message || "Import thành công!");
        if (response.ok) location.reload();
    });

    async function loadVersionInfo() {
        try {
            const response = await fetch('/version');
            const data = await response.json();

            document.getElementById('app-version').textContent = data.version || 'Không rõ';
            document.getElementById('app-build-date').textContent = data.build_date || 'Không rõ';
        } catch (error) {
            console.error("Lỗi khi lấy thông tin version:", error);
        }
    }

    document.addEventListener('DOMContentLoaded', loadVersionInfo);
</script>